import logging
import time
import whisper
import spacy
from transformers.pipelines import pipeline
import librosa
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from telegram.ext import filters
from telegram.ext import Updater, CallbackContext
from telegram import Update
from sents import fillers


def get_duration(file_path):
    audio_data, sample_rate = librosa.load(file_path)
    duration = librosa.get_duration(y=audio_data, sr=sample_rate)

    return duration

def get_report(duration, fillers_count, words_count, res, emotions):
    text = '–û—Ç—á–µ—Ç –æ —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ üìÑ:\n\n'
    overall_score = 0

    duration_text = '<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∞–º–æ–ø—Ä–µ–∑–µ—Ç–∞—Ü–∏–∏: '
    if duration < 60:
        duration_text += '—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è üòî</b>\n–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –±–æ–ª–µ–µ ' \
        '—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ. ' \
        '–ï—Å–ª–∏ —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è, –µ—Å—Ç—å —Ä–∏—Å–∫ —á—Ç–æ —Å–ª—É—à–∞—Ç–µ–ª–∏ –Ω–µ —É–∑–Ω–∞—é—Ç ' \
        '–æ —Ç–≤–æ–∏—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤–∞—Ö, –æ–ø—ã—Ç–µ –∏ –Ω–∞–≤—ã–∫–∞—Ö. ' \
        '–•–æ—Ä–æ—à–∞—è —Å–∞–º–æ–ø—Ä–µ–∑–µ—Ç–∞—Ü–∏—è –¥–ª–∏—Ç—Å—è ' \
        '1-3 –º–∏–Ω—É—Ç—ã.\n' \
        '–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è üò∫'

    if duration > 60*3:
        duration_text += '—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è üòî</b>\n–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –±–æ–ª–µ–µ ' \
        '—á–µ—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ, –±–µ–∑ –≤–æ–¥—ã –∏ –ø–æ –¥–µ–ª—É. ' \
        '–ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ —Å–µ–±–µ, –≤–Ω–∏–º–∞–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–Ω–∏–∑–∏—Ç—Å—è ' \
        '–∏ –æ–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ —Ç–µ–±–µ —Å–º–∞–∂–µ—Ç—Å—è. ' \
        '–•–æ—Ä–æ—à–∞—è —Å–∞–º–æ–ø—Ä–µ–∑–µ—Ç–∞—Ü–∏—è –¥–ª–∏—Ç—Å—è ' \
        '1-3 –º–∏–Ω—É—Ç—ã.\n' \
        '–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è üò∫'
    
    if 60 <= duration <= 60*3:
        duration_text += '–æ—Ç–ª–∏—á–Ω–æ üòÉ</b>\n–°–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —É–ª–æ–∂–∏–ª–∞—Å—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 1-3 –º–∏–Ω—É—Ç—ã. ' \
        '–í—Å–µ —á–µ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞!'
        overall_score += 1

    fillerc_coef = round((fillers_count / words_count) * 100, 0)
    fillers_text = '<b>–°–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã: ' + str(fillerc_coef) + '% –æ—Ç –≤—Å–µ–π —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏</b>\n'
    
    if fillerc_coef >= 15:
        fillers_text += '<b>–°–ª–æ–≤ –ø–∞—Ä–∞–∑–∏—Ç–æ–≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ üòî</b>\n' \
        '–ù–æ –Ω–µ —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–∂–∏–≤–∞—Ç—å, —ç—Ç–æ –ø–æ–ø—Ä–∞–≤–∏–º–æ üòÉ\n' \
        '–ó–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏ —á–∏—Ç–∞–π —Å –ª–∏—Å—Ç–∞, ' \
        '–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –≤—Å—ë —Ä–µ–∂–µ –∏ —Ä–µ–∂–µ –ø–æ–≥–ª—è–¥—ã–≤–∞–π –≤ –ª–∏—Å—Ç –∏ '\
        '–≤—Å–∫–æ—Ä–µ –æ—Ç —Å–ª–æ–≤-–ø–∞—Ä–∞–∑–∏—Ç–æ–≤ –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∏ —Å–ª–µ–¥–∞!\n'
    else:
        fillers_text += '<b>–°–ª–æ–≤ –ø–∞—Ä–∞–∑–∏—Ç–æ–≤ –æ—á–µ–Ω—å –º–∞–ª–æ üòÉ</b>\n' \
        '–≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!\n'
        overall_score += 1

    if fillers_count > 0:
        fillers_text += '–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–∞—Ä–∞–∑–∏—Ç—ã: <i>'
        fillers_list = []
        for key, value in res.items():
            if value > 0:
                fillers_list.append(key)
        fillers_text += ', '.join(fillers_list) + '</i>'

    emotions_text = '<b>–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å —Ä–µ—á–∏ —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: '

    max_emotion_label = None
    max_emotion_value = 0
    for emotion in emotions:
        if emotion['score'] > max_emotion_value:
            max_emotion_value = emotion['score']
            max_emotion_label = emotion['label']
    
    if max_emotion_label == 'neutral':
        emotions_text += '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π üôÇ</b>\n' \
        '–≠—Ç–æ —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ß—Ç–æ–±—ã –µ—â—ë —É–ª—É—á—à–∏—Ç—å —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é, –¥–æ–±–∞–≤—å –Ω–µ–º–Ω–æ–≥–æ –∞–∫—Ü–µ–Ω—Ç–æ–≤ –∏ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–π –≤ —Å–≤–æ—é —Ä–µ—á—å üòÉ'
        overall_score += 1

    if max_emotion_label == 'positive':
        emotions_text += '–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π üòÉ</b>\n' \
        '–≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –õ—é–¥–∏ —Ç—è–Ω—É—Ç—Å—è –∫ —Ç–∞–∫–∏–º –ª—é–¥—è–º –∫–∞–∫ —Ç—ã!'
        overall_score += 1

    if max_emotion_label != 'neutral' and max_emotion_label != 'positive':
        emotions_text += '–±–ª–∏–∂–µ –∫ –Ω–µ–≥–∞—Ç–∏–≤—É üòî</b>\n' \
        '–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ—Å—Ç–æ –¥–µ–Ω—å –Ω–µ –∑–∞–¥–∞–ª—Å—è –∏–ª–∏ –∞–ª–≥–æ—Ä–∏—Ç–º –≥–ª—é—á–∏—Ç.\n' \
        '–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π! –í–∑–¥–æ—Ö–Ω–∏ –ø–æ–ª–Ω–æ–π –≥—Ä—É–¥—å—é, –ø–æ–º–Ω–∏ —á—Ç–æ —É —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üò§'

    overall_text = f'<b>–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∞–º–æ–ø—Ä–µ–∑–µ—Ç–∞—Ü–∏–∏: {overall_score} –∏–∑ 3</b>\n'
    if  overall_score <= 1:
        overall_text += '–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π! –£ —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–æ–¥–æ–ª–∂–∞–π –ø—ã—Ç–∞—Ç—å—Å—è –∏ –≤–µ—Ä—å –≤ —Å–µ–±—è üò§'
    else:
         overall_text += '–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ, —Ç—ã –≤—Å—ë —Å–º–æ–∂–µ—à—å üò∫'

    text += duration_text + '\n\n' + fillers_text + '\n\n' + emotions_text + '\n\n' + overall_text 
    return text

async def process_voice(update, file_arr, file_name):
    result = whisper_model.transcribe(file_name)

    res = {}
    fillers_count = 0
    data = result["text"].lower()
    
    for word in fillers:
        match_count = data.count(word)
        res[word] = match_count
        fillers_count += match_count

    text = nlp(result["text"])
    words_count = 0

    for token in text:
        if not token.is_punct and \
        not token.is_space and \
        not token.is_bracket and \
        not token.is_quote:
            words_count += 1
    
    duration = get_duration(file_name)

    emotions = pipe(file_name)

    report_text = get_report(duration, fillers_count, words_count, res, emotions)

    await update.message.reply_text(report_text, parse_mode='HTML')

async def voice(update: Update, context: CallbackContext) -> None:
    message = update.effective_message
    chat_id = update.effective_message.chat.id
    file_name = 'voices/%s_%s%s.ogg' % (chat_id, update.message.from_user.id, update.message.message_id)

    logger.info(file_name)

    file = await context.bot.get_file(message.voice.file_id)
    
    file_arr = await file.download_to_drive(file_name)
    
    await update.message.reply_text('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –æ–∂–∏–¥–∞–π üòé\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - 10 –º–∏–Ω—É—Ç ‚è±')
   
    await process_voice(update, file_arr, file_name)

async def hello(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç ü§ó\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é üò§\n–ó–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤—É—Ö—É —Å —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–µ–π –∏ –ø–æ–ª—É—á–∏ –æ—Ç—á–µ—Ç üìÑ')


logging.basicConfig(filename='bot.log', level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = 'token_here'

# ML INIT
whisper_model = whisper.load_model("medium")
nlp = spacy.load("ru_core_news_lg")
pipe = pipeline(model="KELONMYOSA/wav2vec2-xls-r-300m-emotion-ru", trust_remote_code=True)

app = ApplicationBuilder().token(TOKEN).build()

voice_handler = MessageHandler(filters.VOICE, voice)

app.add_handler(CommandHandler("start", hello))
app.add_handler(voice_handler)

app.run_polling()